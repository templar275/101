@import './reset.min.less';
@import './swiper.min.less';
@import (reference) './common.less';

@keyframes bounceInLeft {
    from, 60%, 75%, 90%, to {
        -webkit-animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);
        animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000)
    }
    0% {
        opacity: 0;
        -webkit-transform: translate3d(-3000px, 0, 0);
        transform: translate3d(-3000px, 0, 0)
    }
    60% {
        opacity: 1;
        -webkit-transform: translate3d(25px, 0, 0);
        transform: translate3d(25px, 0, 0)
    }
    75% {
        -webkit-transform: translate3d(-10px, 0, 0);
        transform: translate3d(-10px, 0, 0)
    }
    90% {
        -webkit-transform: translate3d(5px, 0, 0);
        transform: translate3d(5px, 0, 0)
    }
    to {
        -webkit-transform: none;
        transform: none;
        opacity: 1
    }
}
@keyframes shake {
    from, to {
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0);
    }
    0% {
        opacity: 0
    }
    10%, 30%, 50%, 70%, 90% {
        -webkit-transform: translate3d(-10px, 0, 0);
        transform: translate3d(-10px, 0, 0)
    }
    20%, 40%, 60%, 80% {
        -webkit-transform: translate3d(10px, 0, 0);
        transform: translate3d(10px, 0, 0)
    }
    100% {
        opacity: 1
    }
}
@keyframes tada {
    from {
        -webkit-transform: scale3d(1, 1, 1);
        transform: scale3d(1, 1, 1);
    }
    10%, 20% {
        -webkit-transform: scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg);
        transform: scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg)
    }
    30%, 50%, 70%, 90% {
        -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
        transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)
    }
    40%, 60%, 80% {
        -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
        transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)
    }
    to {
        -webkit-transform: scale3d(1, 1, 1);
        transform: scale3d(1, 1, 1);
        opacity: 1
    }
}

@keyframes musicmove{
    0%{transform: rotate(0deg);}
    100%{transform: rotate(360deg);}
}





/* 基础区域 */
html{
    // 
    font-size: 100px;}

html,body{
    height: 100%;
    overflow: hidden;
    background: #e4e4e4;;
}
.container{
    margin: 0 auto;
    max-width: 750px;
    height:100%;
}
.cubeBox,.swiperBox{
    display: none;
    height: 100%;
}


/* 魔方区域 */

.cubeBox{
    position: relative;
    display: block;
    background: url(../img/zf_cubeBg.jpg) no-repeat center center;
    background-size: cover;
    
    // 基于嵌套选中
    .tip{
        // 换算成rem
        width: 3.94rem;
        height: .44rem;
        .BG-IMAGE('zf_cubeTip.png');
        // background: url(../img/zf_cubeTip.png) no-repeat;
        background-size:100% 100%;
        // 调用水平方法
        .CENTER-X(3.94);
        bottom: .5rem;
    }
    
    // 魔方区域
    .cube{  
        width: 5.1rem;
        height: 5.1rem;
        .CENTER(5.1,5.1);
        // 水平垂直居中
        li{
            width:100%;
            height: 100%;
            .CENTER(5.1,5.1);
            img{
                height: 100%;
                width: 100%;
            }
        }
    }


    // 魔方盒子的3d处理
    // 1.给3d变形元素所在的容器（舞台）设置视距
    perspective: 2000px;
    .cube{
        // 2.给需要3d变形的元素设置3d变形特征
        transform-style:preserve-3d;
        transform:scale(.7) rotateX(-30deg) rotateY(45deg);
        transition:transform .3s linear;
    // 3.控制每一个面的移动和旋转
    li:nth-child(1){
        transform:translateZ(2.55rem);
    }

    li:nth-child(2){
        transform:translateZ(-2.55rem) rotateY(180deg);
    }
    li:nth-child(3){
        transform:translateX(-2.55rem) rotateY(-90deg);
    }
    li:nth-child(4){
        transform:translateX(2.55rem) rotateY(90deg);
    }
    li:nth-child(5){
        transform:translateY(-2.55rem) rotateX(90deg);
    }
    li:nth-child(6){
        transform:translateY(2.55rem) rotateX(-90deg);
    }
}




}



/* 滑屏区域 */
.swiperBox{
    .return{
        width: .64rem;
        height: .75rem;
        .BG-IMAGE('zf_return.png');
        z-index: 999;
        position: absolute;
        top: .2rem;
        right: .2rem;
    }



    .swiper-container,.swiper-slide{
        position: relative;
        height: 100%;
        overflow: hidden;
    }

    .page1{
        background: #fff;
        perspective: 2000px;
        .base{
            transform-style: preserve-3d;
            box-sizing: border-box;
            width: 5.4rem;
            height: 6.6rem;
            .CENTER(6,6.6);
        }
        dt,dd{box-sizing: border-box;
        height: .6rem;
        line-height: .6rem;
        border-top: .02rem dashed rgba(255,255 ,255 ,.3 );
        background: #8fbb4c;
        font-size: .28rem;
        // 超出一行自动换行
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;}
        dt{
            text-align: center;
            font-size: .4rem;
            color: yellow;
        }
        dd{position: relative;
        padding-left: .66rem;
            em{
                z-index: 999;
                width: .36rem;
                height: .42rem;
                line-height: .42rem;
                text-align: center;
                color: white;
                font-size: .2rem;
                font-style: normal;
                .BG-IMAGE('zf_outline.png');
                .CENTER-Y(.42);
                left: .15rem;
            }
            p{
                position: relative;
                z-index: 999;
            }
    }
    }
    .page2{
        background: #fff9c1;

        img{
            width: 1rem;
            height: 1rem;
            .CENTER(1,1);
            &:nth-of-type(7){
                width: 1.32rem;
                height: 1.7rem;
                .CENTER(1.32,1.7);
                opacity: 0;
            }

        }
    }
    // 设置第二页的动画
    #page2{
        img{
            &:nth-of-type(7){
                animation: shake 1s both;
            }
            &:nth-of-type(1){
                margin-top: -2.9rem;
            }
            &:nth-of-type(2){
                margin-top: -1.7rem;
                margin-left: 1.5rem;
            }
            &:nth-of-type(3){
                margin-top: .7rem;
                margin-left: 1.5rem;
            }
            &:nth-of-type(4){
                margin-top: 1.9rem;
            }
            &:nth-of-type(5){
                margin-top: .7rem;
                margin-left: -2.5rem;
            }
            &:nth-of-type(6){
                margin-top:-1.7rem;
                margin-left: -2.5rem;
            }
            transition: .3s;
            opacity: 1;
        }
    }

    .page3{
        background: #fbfffb;
    }
    .page4{
        background: #e45454;
    }
    .page5{
        background: #fac47f;
    }
    .page6{
        background: #5975ff;
    }
}


/* 滑屏页面中的帧动画
    1.先写每一页的解构和基础样式（写在.page下）
    2.让所有后续需要运动的元素初始透明度为零
    3.所有运动的动画（大部分动画在animate。css中找到，把最后一帧透明度设置为1）写在#page下（id选择器的优先级高）
    4.在swiper切换的时候，运动到当前页面，就给当前页面设置一个id等于（page），其余的id都可以移除掉
*/



/* 音乐区域 */
.musicBox{
    .audio{
        display: none;}
    .icon{
        display: none;
        position: absolute;
        top: .2rem;
        left: .2rem;
        height: .6rem;width: .6rem;
        .BG-IMAGE('music.svg')
    }
    .move{
        animation:musicmove 1s linear infinite;
    }
}